import telebot
import whisper
import os
import time
import traceback
import requests  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Ollama API
import json      # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç Ollama
import re        # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π, —á—Ç–æ–±—ã —É–±–∏—Ä–∞—Ç—å —Ç–µ–≥–∏
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
# –í–∞—à —Ç–æ–∫–µ–Ω –æ—Ç BotFather

TELEGRAM_BOT_TOKEN = "7931267680:AAEhFAIj8BgQXA9FSzWXdKtU5Auirn6UsDE"


# --- ### –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø OLLAMA ### ---

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ True, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Ollama, –∏–ª–∏ False, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å
ENABLE_OLLAMA_CORRECTION = True

# ### –ò–ó–ú–ï–ù–ï–ù–ò–ï ###: –£–∫–∞–∑–∞–Ω–∞ –Ω–æ–≤–∞—è –º–æ–¥–µ–ª—å, –∫–∞–∫ –≤—ã –∏ –ø—Ä–æ—Å–∏–ª–∏.
OLLAMA_MODEL_NAME = "deepseek-r1:32b-qwen-distill-q4_K_M"
OLLAMA_MODEL_NAME = "qwen3:32b-q4_K_M"
OLLAMA_MODEL_NAME = "qwen3:14b"
# –ê–¥—Ä–µ—Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API Ollama. –û–±—ã—á–Ω–æ –æ–Ω —Ç–∞–∫–æ–π.
OLLAMA_API_URL = "http://localhost:11434/api/generate"
OLLAMA_BASE_URL = "http://localhost:11434"  # ### –ù–û–í–û–ï ###: –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫
# ### –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ###: –£–±—Ä–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è OLLAMA_API_URL, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫.
# –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å, –∞ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏.
OLLAMA_BASE_URL = "http://localhost:11434"

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤ ---
user_last_text = {}


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Ollama –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ---
def check_ollama_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Ollama –∏ –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω–æ–π –º–æ–¥–µ–ª–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ."""
    print("--- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Ollama ---")
    try:
        response = requests.get(f"{OLLAMA_BASE_URL}/api/tags")
        response.raise_for_status()
        models_data = response.json()
        local_models = [model['name'] for model in models_data.get('models', [])]

        print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Ollama —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        if local_models:
            print(f"   –õ–æ–∫–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã –º–æ–¥–µ–ª–∏: {', '.join(local_models)}")
        else:
            print("   ‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–æ –Ω–µ—Ç —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.")

        if OLLAMA_MODEL_NAME not in local_models:
            print(
                f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ú–æ–¥–µ–ª—å '{OLLAMA_MODEL_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –°–∫–∞—á–∞–π—Ç–µ –µ–µ –∫–æ–º–∞–Ω–¥–æ–π: ollama pull {OLLAMA_MODEL_NAME}\n")
        else:
            print(f"‚úÖ –¢—Ä–µ–±—É–µ–º–∞—è –º–æ–¥–µ–ª—å '{OLLAMA_MODEL_NAME}' –Ω–∞–π–¥–µ–Ω–∞.")
        print("--------------------------")
        return True

    except requests.exceptions.RequestException as e:
        print(
            f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Ollama. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ.\n   –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {e}\n")
        return False


# --- –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper ---
print("–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ Whisper...")
try:
    local_whisper_model = whisper.load_model("small")
    print("‚úÖ –ú–æ–¥–µ–ª—å Whisper —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏ Whisper: {e}")
    exit()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)


# --- ### –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§–∏–Ω–∞–ª—å–Ω–∞—è, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Ollama ### ---
def ask_ollama(prompt: str) -> (str | None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–º–ø—Ç –≤ Ollama –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏."""
    api_url = f"{OLLAMA_BASE_URL}/api/chat"  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è —á–∞—Ç-–º–æ–¥–µ–ª–µ–π
    try:
        print(f"--- –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Ollama ({api_url}) —Å –º–æ–¥–µ–ª—å—é {OLLAMA_MODEL_NAME} ---")
        payload = {
            "model": OLLAMA_MODEL_NAME,
            "messages": [{"role": "user", "content": prompt}],
            "stream": False
        }
        response = requests.post(api_url, json=payload, timeout=300)

        print(f"   –°—Ç–∞—Ç—É—Å-–∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"   –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")

        response.raise_for_status()
        response_data = response.json()

        if response_data.get("done_reason") == "load":
            print("‚ùå –û–®–ò–ë–ö–ê OLLAMA: –ú–æ–¥–µ–ª—å –Ω–µ —Å–º–æ–≥–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è (–Ω–µ—Ö–≤–∞—Ç–∫–∞ RAM/VRAM).")
            return "MODEL_LOAD_ERROR"

        if "message" not in response_data or "content" not in response_data.get("message", {}):
            print(f"‚ùå –û—à–∏–±–∫–∞: –û—Ç–≤–µ—Ç –æ—Ç Ollama –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            return None

        response_text = response_data["message"]["content"].strip()

        # ### –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ###: –í–æ–∑–≤—Ä–∞—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ç–µ–≥–æ–≤ <think>.
        cleaned_text = re.sub(r'<think>.*?</think>', '', response_text, flags=re.DOTALL).strip()

        print("--- –ó–∞–ø—Ä–æ—Å –∫ Ollama —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω ---")
        return cleaned_text

    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Ollama API: {e}")
        return None
    except Exception:
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ ask_ollama: {traceback.format_exc()}")
        return None


# --- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–Ω–æ–ø–æ–∫ ---
def generate_action_buttons():
    markup = InlineKeyboardMarkup(row_width=3)
    markup.add(
        InlineKeyboardButton("‚úçÔ∏è –£–ª—É—á—à–∏—Ç—å", callback_data="correct"),
        InlineKeyboardButton("üìú –ö—Ä–∞—Ç–∫–æ", callback_data="summarize"),
        InlineKeyboardButton("üìå –¢–µ–∑–∏—Å—ã", callback_data="key_points")
    )
    return markup


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ ---
@bot.callback_query_handler(func=lambda call: call.data in ["correct", "summarize", "key_points"])
def callback_query_handler(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    last_text = user_last_text.get(chat_id)

    if not last_text:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return

    actions = {
        "correct": (
        "‚úçÔ∏è –£–ª—É—á—à–∞—é —Ç–µ–∫—Å—Ç...", "**–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**", f'–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä... –¢–µ–∫—Å—Ç:\n"{last_text}"'),
        "summarize": (
        "üìú –°–æ–∑–¥–∞—é –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑...", "**–ö—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑:**", f'–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É... –¢–µ–∫—Å—Ç:\n"{last_text}"'),
        "key_points": (
        "üìå –í—ã–¥–µ–ª—è—é —Ç–µ–∑–∏—Å—ã...", "**–ö–ª—é—á–µ–≤—ã–µ —Ç–µ–∑–∏—Å—ã:**", f'–í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–∑–∏—Å—ã... –¢–µ–∫—Å—Ç:\n"{last_text}"')
    }

    status_text, result_title, prompt = actions[call.data]

    bot.edit_message_text(status_text, chat_id, message_id)
    result = ask_ollama(prompt)

    if result == "MODEL_LOAD_ERROR":
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ '{OLLAMA_MODEL_NAME}'.\n\n–í–µ—Ä–æ—è—Ç–Ω–æ, –Ω–∞ –≤–∞—à–µ–º –ü–ö –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏."
        bot.edit_message_text(error_msg, chat_id, message_id)
    elif result:
        if len(result) > 4096:
            file_path = f"{chat_id}_result.txt"
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(result)
            with open(file_path, 'rb') as doc:
                bot.send_document(chat_id, doc, caption=result_title)
            os.remove(file_path)
            bot.delete_message(chat_id, message_id)
        else:
            bot.edit_message_text(f"{result_title}\n\n{result}", chat_id, message_id, parse_mode='Markdown')
    else:
        bot.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.", chat_id, message_id)


# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.reply_to(message, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏–æ...")


@bot.message_handler(commands=['summarize', 'key_points', 'translate'])
def handle_text_commands(message):
    chat_id = message.chat.id
    last_text = user_last_text.get(chat_id)
    command, *args = message.text.split()

    if not last_text:
        bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏.")
        return

    status_message = bot.reply_to(message, "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")

    if command == "/translate":
        if not args:
            bot.edit_message_text("–£–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞. –ü—Ä–∏–º–µ—Ä: `/translate en`", chat_id,
                                  status_message.message_id)
            return
        lang = args[0]
        prompt = f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ —è–∑—ã–∫ '{lang}'. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥...\n\n–¢–µ–∫—Å—Ç:\n\"{last_text}\""
        result = ask_ollama(prompt)
        result_title = f"**–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ {lang}:**"
    else:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è /summarize –∏ /key_points
        action = command.strip('/')

        class FakeCall:
            def __init__(self, msg, data):
                self.message = msg
                self.data = data

        callback_query_handler(FakeCall(status_message, action))
        return  # –í—ã—Ö–æ–¥–∏–º, —Ç.–∫. callback_query_handler —Å–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–≤–µ—Ç

    if result == "MODEL_LOAD_ERROR":
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ '{OLLAMA_MODEL_NAME}'."
        bot.edit_message_text(error_msg, chat_id, status_message.message_id)
    elif result:
        bot.edit_message_text(f"{result_title}\n\n{result}", chat_id, status_message.message_id, parse_mode='Markdown')
    else:
        bot.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É.", chat_id, status_message.message_id)


def process_audio_message(message, file_id, file_name_hint):
    chat_id = message.chat.id
    status_message = None
    audio_file_path = None
    base_name = f"{message.from_user.id}_{message.message_id}"
    file_ext = os.path.splitext(file_name_hint)[1] if file_name_hint else ".ogg"
    audio_file_path = f"{base_name}{file_ext}"

    try:
        status_message = bot.send_message(chat_id, "‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ...")
        bot.edit_message_text("üì• –ó–∞–≥—Ä—É–∂–∞—é –∞—É–¥–∏–æ...", chat_id, status_message.message_id)
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        with open(audio_file_path, 'wb') as f:
            f.write(downloaded_file)
        bot.edit_message_text("üé§ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–∞—á–∏–Ω–∞—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É...", chat_id, status_message.message_id)
        result = local_whisper_model.transcribe(audio_file_path, fp16=False)
        transcript = result["text"].strip()

        if not transcript:
            bot.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –∞—É–¥–∏–æ.", chat_id, status_message.message_id)
            return

        user_last_text[chat_id] = transcript

        if len(transcript) > 4096:
            bot.edit_message_text("üìÑ –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º...", chat_id, status_message.message_id)
            file_path = f"{base_name}_transcript.txt"
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(transcript)
            with open(file_path, 'rb') as doc:
                bot.send_document(chat_id, doc, caption="**–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:**",
                                  reply_to_message_id=message.message_id)
            os.remove(file_path)
            bot.send_message(chat_id, "–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º —Ç–µ–∫—Å—Ç–æ–º?", reply_markup=generate_action_buttons(),
                             reply_to_message_id=message.message_id)
            bot.delete_message(chat_id, status_message.message_id)
        else:
            bot.edit_message_text(
                f"**–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:**\n\n{transcript}",
                chat_id,
                status_message.message_id,
                reply_markup=generate_action_buttons(),
                parse_mode='Markdown'
            )

    except Exception:
        print(
            f"--- –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ ---\n{traceback.format_exc()}\n---------------------------------------------")
        error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞."
        if status_message:
            bot.edit_message_text(error_text, chat_id, status_message.message_id)
        else:
            bot.send_message(chat_id, error_text, reply_to_message_id=message.message_id)
    finally:
        if audio_file_path and os.path.exists(audio_file_path):
            os.remove(audio_file_path)


@bot.message_handler(content_types=['voice', 'audio'])
def handle_media(message):
    file_id = message.voice.file_id if message.voice else message.audio.file_id
    file_name = "voice.ogg" if message.voice else message.audio.file_name
    process_audio_message(message, file_id, file_name)


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    if check_ollama_connection():
        print(f"‚úÖ –†–µ–∂–∏–º –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤–∫–ª—é—á–µ–Ω. –ú–æ–¥–µ–ª—å: {OLLAMA_MODEL_NAME}")
        while True:
            try:
                print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
                bot.polling(none_stop=True)
            except Exception:
                print(f"--- –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ë–û–¢–ê ---\n{traceback.format_exc()}\n---------------------------------")
                print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...")
                time.sleep(15)
    else:
        print("–ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Ollama.")